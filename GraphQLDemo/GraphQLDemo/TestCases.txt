# GraphQL API Test Cases

## Base URL
```
http://localhost:7097/
```

## GraphQL Playground (Testing UI)
```
http://localhost:7097/ui/altair
```

---

## 📖 QUERIES

### 1. Get All Books
**Operation:** Query  
**Description:** Retrieve all books from the system

```graphql
query GetAllBooks {
  books {
    title
    author
    publishedYear
  }
}
```

### 2. Get Book by Title  
**Operation:** Query  
**Description:** Retrieve a specific book by its title

```graphql
query GetBookByTitle {
  book(title: "1984") {
    title
    author
    publishedYear
  }
}
```

---

## ✏️ MUTATIONS

### 3. Add New Book
**Operation:** Mutation  
**Description:** Add a new book to the system

```graphql
mutation AddBook {
  addBook(book: {
    title: "The Hobbit"
    author: "J.R.R. Tolkien"
    publishedYear: 1937
  }) {
    title
    author
    publishedYear
  }
}
```

### 4. Update Existing Book
**Operation:** Mutation  
**Description:** Update an existing book's information

```graphql
mutation UpdateBook {
  updateBook(
    oldTitle: "The Hobbit"
    updatedBook: {
      title: "The Hobbit: There and Back Again"
      author: "J.R.R. Tolkien"
      publishedYear: 1937
    }
  ) {
    title
    author
    publishedYear
  }
}
```

### 5. Delete Book
**Operation:** Mutation  
**Description:** Delete a book by title

```graphql
mutation DeleteBook {
  deleteBook(title: "1984")
}
```

---

## 🔔 SUBSCRIPTIONS (Real-time)

### 6. Subscribe to New Books
**Operation:** Subscription  
**Description:** Real-time notifications when new books are added  
**Note:** Requires WebSocket connection

```graphql
subscription OnBookAdded {
  bookAdded {
    title
    author
    publishedYear
  }
}
```

### 7. Subscribe to Book Updates
**Operation:** Subscription  
**Description:** Real-time notifications when books are updated

```graphql
subscription OnBookUpdated {
  bookUpdated {
    title
    author
    publishedYear
  }
}
```

### 8. Subscribe to Book Deletions
**Operation:** Subscription  
**Description:** Real-time notifications when books are deleted

```graphql
subscription OnBookDeleted {
  bookDeleted
}
```

---

## 🧪 TEST SCENARIOS

### Complete CRUD Flow Test
1. **Get initial books:** Run `GetAllBooks`
2. **Add new book:** Run `AddBook` with test data
3. **Verify addition:** Run `GetAllBooks` again
4. **Update book:** Run `UpdateBook` 
5. **Verify update:** Run `GetBookByTitle` with new title
6. **Delete book:** Run `DeleteBook`
7. **Verify deletion:** Run `GetAllBooks`

### Real-time Flow Test
1. **Open subscription:** Run `OnBookAdded` in Tab 1
2. **Trigger event:** Run `AddBook` in Tab 2
3. **Observe real-time update** in Tab 1

---

## 🛠 FRONTEND USAGE EXAMPLES

### JavaScript/TypeScript (Apollo Client)
```javascript
import { ApolloClient, InMemoryCache, gql } from '@apollo/client';

const client = new ApolloClient({
  uri: 'http://localhost:5000/graphql',
  cache: new InMemoryCache()
});

// Query example
const GET_BOOKS = gql`
  query {
    books {
      title
      author
    }
  }
`;

// Mutation example  
const ADD_BOOK = gql`
  mutation AddBook($book: BookInput!) {
    addBook(book: $book) {
      title
      author
    }
  }
`;
```

### React Hook Example
```javascript
import { useQuery, useMutation } from '@apollo/client';

function BooksComponent() {
  const { data, loading } = useQuery(GET_BOOKS);
  const [addBook] = useMutation(ADD_BOOK);
  
  if (loading) return <p>Loading...</p>;
  
  return (
    <div>
      {data.books.map(book => (
        <div key={book.title}>{book.title} by {book.author}</div>
      ))}
    </div>
  );
}
```

---

## ⚠️ NOTES

- **Subscriptions require WebSocket support** - ensure `app.UseWebSockets()` is configured
- **All mutations return the affected book** (except delete which returns boolean)
- **Error handling** is built into GraphQL responses
- **Use Altair UI** for easy testing: http://localhost:7097/ui/altair

---

## 📋 SAMPLE RESPONSES

### Successful Query Response
```json
{
  "data": {
    "books": [
      {
        "title": "1984",
        "author": "George Orwell",
        "publishedYear": 1949
      }
    ]
  }
}
```

### Successful Mutation Response  
```json
{
  "data": {
    "addBook": {
      "title": "The Hobbit",
      "author": "J.R.R. Tolkien"
    }
  }
}
```

### Subscription Response (Real-time)
```json
{
  "data": {
    "bookAdded": {
      "title": "New Book",
      "author": "New Author",
      "publishedYear": 2024
    }
  }
}
```